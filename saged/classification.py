"""Methods for classifier training.

With this module, you can quickly initialize classifiers given a classifier type from
saged.configuration and train error classifiers for given datasets.
"""

from sklearn.neural_network import MLPClassifier
from saged.configuration import ClassifierType
from saged.featurization import create_features

def initialize_classifier(classifier_type):
    """Initialize a classifier based on the given classifier type.

    Parameters:
        classifier_type (saged.configuration.ClassifierType): Type of classifier to initialize.

    Returns:
        General classifier: The initialized classifier
    """
    if classifier_type is ClassifierType.MLP_CLASSIFIER:
        return MLPClassifier(max_iter=1000)

def train_classifiers(dataset, classifier_types, verbose=False):
    """Trains error classifiers for the columns of the given dataset. The features are generated by
    saged.featurization.create_features().

    Parameters:
        dataset (saged.datasets.Dataset): The dataset to train classifiers for.
        classifier_type (list[saged.configuration.ClassifierType]): A list of classifier types that
            should be trained.
        verbose (bool, optional): If True, print verbose messages. Defaults to False.
    """
    if verbose:
        print("* Create features... ", end="", flush=True)

    all_features = create_features(
        dataset.dirty_df
    )

    if verbose:
        print("done.")

    all_errors = dataset.get_actual_errors()

    for column in dataset.dirty_df.columns:
        features = all_features[column]
        errors = all_errors[column]

        for classifier_type in classifier_types:
            if verbose:
                print(
                    f"* Fit classifier ('{classifier_type.value}') for column '{column}'... ",
                    end="", flush=True
                )

            classifier = initialize_classifier(classifier_type)

            # TODO How to deal with NaN?
            classifier.fit(features.fillna(0), errors)

            if verbose:
                print("done.")

            if verbose:
                print(f"* Save classifier model for column '{column}'... ", end="", flush=True)

            dataset.save_classifier_model(classifier, classifier_type, column)

            if verbose:
                print("done.")
